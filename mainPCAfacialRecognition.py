from modules.PCAfacialRecognition import PCAfacialRecognition
import matplotlib.pyplot as plt
import numpy as np


# INPUT PARAMETERS
seed = 0
numPeopleTraining = 38
numFacesTraining = 8
datasetPath = 'PATH TO ARCHIVE'
variancePercentage = 0.8
thresholdError = 5*10**3
showImTest = False
showImPred = False
showConfMat = True

##################################################################################################################

# creating an instance
pcaFR = PCAfacialRecognition(datasetPath)

# split the dataset in training set and test set
pcaFR.DatasetSplit(seed, numPeopleTraining, numFacesTraining)
print(f"\nPeople selected for the training phase:\n {pcaFR.peopleTraining}")
print(f"\nPeople selected  for the test phase (and should not be recognized by the algorithm):\n {pcaFR.peopleTest}")

# calculate the principal components
pcaFR.PrincipalComponents()
# create the subspace generated by the eigenfaces
subspaceDimension, subspaceBasis = pcaFR.SubspaceBasis(variancePercentage)

# plot some eigenfaces
for eigenface in range(3):
    plt.imshow(np.reshape(pcaFR.subspaceBasis[:, eigenface].copy(), (pcaFR.heightImage,pcaFR.widthImage)), cmap='gray')
    plt.title(f'Eigenface {eigenface+1}')
    plt.axis('off')
    plt.show()

# calculate the projections of the images of the training set   
pcaFR.TrainingSetProjection()
# synthesis of the images of the training set
ReconstructedImages = pcaFR.TrainingSetReconstruction()
# plot some reconstructed images
for image in range(3):
    fig, axs = plt.subplots(1, 2, figsize=(10, 5))
    axs[0].imshow(np.reshape(pcaFR.TrainingMat[:,image].copy(), (pcaFR.heightImage,pcaFR.widthImage)), cmap='gray')
    axs[0].set_title(f'Original image {image+1}')
    axs[0].axis('off')
            
    axs[1].imshow(np.reshape(ReconstructedImages[:,image].copy(), (pcaFR.heightImage,pcaFR.widthImage)), cmap='gray')
    axs[1].set_title(f'Reconstructed image {image+1}')
    axs[1].axis('off')
    
    plt.tight_layout()
    plt.show()

# Test
accuracy, precision, recall, confusionMatrix = pcaFR.ExecuteTest(thresholdError, showImTest, showImPred, showConfMat)
print('\nTEST RESULTS:')
print(f'accuracy = {accuracy}')
print(f'mean precision = {np.mean(precision)}')
print(f'mean recall = {np.mean(recall)}')

if showImPred == 0 and showImTest == 0:
    # print some tests
    imagePlotted = 0
    while imagePlotted < 5:
        if pcaFR.predicted_label[imagePlotted] != 0:
            fig, axs = plt.subplots(1, 2, figsize=(10, 5))
            axs[0].imshow(np.reshape(pcaFR.TestMat[:,imagePlotted].copy(), (pcaFR.heightImage,pcaFR.widthImage)), cmap='gray')
            axs[0].set_title('Test image')
            axs[0].axis('off')
            axs[1].imshow(np.array(plt.imread(datasetPath+f"archive/s{pcaFR.predicted_label[imagePlotted]}/{pcaFR.predicted_face[imagePlotted]}.pgm")), cmap='gray')
            axs[1].set_title('Predicted image')
            axs[1].axis('off')
            plt.tight_layout()
            plt.show()
            imagePlotted += 1
        
            